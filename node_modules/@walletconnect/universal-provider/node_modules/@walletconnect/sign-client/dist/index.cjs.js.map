{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n  session_connect: \"session_connect\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  // evm\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  // solana\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n\n  // sui\n  sui_signAndExecuteTransaction: {\n    key: \"digest\",\n  },\n  sui_signTransaction: {\n    key: \"\",\n  },\n\n  // hedera\n  hedera_signAndExecuteTransaction: {\n    key: \"transactionId\",\n  },\n  hedera_executeTransaction: {\n    key: \"transactionId\",\n  },\n\n  // near\n  near_signTransaction: {\n    key: \"\",\n  },\n  near_signTransactions: {\n    key: \"\",\n  },\n\n  // tron\n  tron_signTransaction: {\n    key: \"txID\",\n  },\n\n  // xrpl\n  xrpl_signTransaction: {\n    key: \"\",\n  },\n\n  xrpl_signTransactionFor: {\n    key: \"\",\n  },\n\n  // algorand\n  algo_signTxn: {\n    key: \"\",\n  },\n\n  // bitcoin\n  sendTransfer: {\n    key: \"txid\",\n  },\n\n  // stacks\n  stacks_stxTransfer: {\n    key: \"txId\",\n  },\n\n  // polkadot\n  polkadot_signTransaction: {\n    key: \"\",\n  },\n\n  // cosmos\n  cosmos_signDirect: {\n    key: \"\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n  extractSolanaTransactionId,\n  getSuiDigest,\n  mergeRequiredAndOptionalNamespaces,\n  getNearTransactionIdFromSignedTransaction,\n  getAlgorandTransactionId,\n  buildSignedExtrinsicHash,\n  getSignDirectHash,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n  private pendingSessions: Map<\n    number,\n    {\n      sessionTopic: string;\n      pairingTopic: string;\n      proposalId: number;\n      publicKey: string;\n    }\n  > = new Map();\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(async () => {\n        await this.processPendingMessageEvents();\n\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  private async processPendingMessageEvents() {\n    try {\n      const topics = this.client.session.keys;\n      const pendingMessages = this.client.core.relayer.messages.getWithoutAck(topics);\n      for (const [topic, messages] of Object.entries(pendingMessages)) {\n        for (const message of messages) {\n          try {\n            await this.onProviderMessageEvent({\n              topic,\n              message,\n              publishedAt: Date.now(),\n            });\n          } catch (error) {\n            this.client.logger.warn(\n              `Error processing pending message event for topic: ${topic}, message: ${message}`,\n            );\n          }\n        }\n      }\n    } catch (error) {\n      this.client.logger.warn(\"processPendingMessageEvents failed\", error);\n    }\n  }\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n\n    // requiredNamespaces are deprecated, assign them to optionalNamespaces\n    connectParams.optionalNamespaces = mergeRequiredAndOptionalNamespaces(\n      connectParams.requiredNamespaces,\n      connectParams.optionalNamespaces,\n    );\n\n    connectParams.requiredNamespaces = {};\n\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      id: payloadId(),\n    };\n    const sessionConnectTarget = engineEvent(\"session_connect\", proposal.id);\n\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n\n    const proposalExpireHandler = ({ id }: { id: number }) => {\n      if (id === proposal.id) {\n        this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n        this.pendingSessions.delete(proposal.id);\n        // emit the event to trigger reject, this approach automatically cleans up the .once listener below\n        this.events.emit(sessionConnectTarget, {\n          error: { message: PROPOSAL_EXPIRY_MESSAGE, code: 0 },\n        });\n      }\n    };\n\n    this.client.events.on(\"proposal_expire\", proposalExpireHandler);\n    this.events.once<\"session_connect\">(sessionConnectTarget, ({ error, session }) => {\n      this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n      if (error) reject(error);\n      else if (session) {\n        resolve(session);\n      }\n    });\n\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n      clientRpcId: proposal.id,\n    });\n\n    await this.setProposal(proposal.id, proposal);\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, scopedProperties, sessionConfig } =\n      params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.deleteProposal(id);\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n    }\n\n    await this.deleteProposal(id);\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n      id: payloadId(),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    const authenticateId = payloadId();\n    const sessionConnectEventTarget = engineEvent(\"session_connect\", proposal.id);\n    const authenticateEventTarget = engineEvent(\"session_request\", authenticateId);\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        resolve({\n          session,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(authenticateId, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(sessionConnectEventTarget, onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(proposal.id);\n      // cleanup listener for fallback response\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(sessionConnectEventTarget, onSessionConnect);\n    this.events.once(authenticateEventTarget, onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, authenticateId);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: authenticateId,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: proposal.id,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(proposal.id, proposal);\n    await this.setAuthRequest(authenticateId, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.deleteProposal(id);\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        tvf = this.getTVFParams(id, request.params, result);\n      } catch (error) {\n        this.client.logger.warn(\n          `sendResult() -> getTVFParams() failed: ${(error as Error)?.message}`,\n        );\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = ENGINE_RPC_OPTS[method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = rpcOpts || ENGINE_RPC_OPTS[method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      this.onProviderMessageEvent(event);\n    });\n  }\n\n  private onProviderMessageEvent = async (event: RelayerTypes.MessageEvent) => {\n    // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n    if (!this.initialized || this.relayMessageCache.length > 0) {\n      this.relayMessageCache.push(event);\n    } else {\n      await this.onRelayMessage(event);\n    }\n  };\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    try {\n      const payload = await this.client.core.crypto.decode(topic, message, {\n        receiverPublicKey: publicKey,\n        encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n      });\n\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        await this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        await this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n      await this.client.core.relayer.messages.ack(topic, message);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = {\n        id,\n        pairingTopic: topic,\n        expiryTimestamp,\n        attestation,\n        encryptedId,\n        ...params,\n      };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.pendingSessions.set(id, {\n        sessionTopic,\n        pairingTopic: topic,\n        proposalId: id,\n        publicKey: selfPublicKey,\n      });\n\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.deleteProposal(id);\n      const target = engineEvent(\"session_connect\", id);\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(target, { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        scopedProperties,\n        sessionConfig,\n      } = payload.params;\n      const pendingSession = [...this.pendingSessions.values()].find(\n        (s) => s.sessionTopic === topic,\n      );\n\n      if (!pendingSession) {\n        return this.client.logger.error(`Pending session not found for topic ${topic}`);\n      }\n\n      const proposal = this.client.proposal.get(pendingSession.proposalId);\n\n      const session: SessionTypes.Struct = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: pendingSession.pairingTopic,\n        requiredNamespaces: proposal.requiredNamespaces,\n        optionalNamespaces: proposal.optionalNamespaces,\n        controller: controller.publicKey,\n        self: {\n          publicKey: pendingSession.publicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(scopedProperties && { scopedProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n\n      await this.client.session.set(session.topic, session);\n      await this.setExpiry(session.topic, session.expiry);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingSession.pairingTopic,\n        metadata: session.peer.metadata,\n      });\n\n      this.client.events.emit(\"session_connect\", { session });\n      this.events.emit(engineEvent(\"session_connect\", pendingSession.proposalId), { session });\n\n      this.pendingSessions.delete(pendingSession.proposalId);\n      this.deleteProposal(pendingSession.proposalId, false);\n      this.cleanupDuplicatePairings(session);\n\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 2176`);\n      }\n\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          ...proposal,\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n          scopedProperties: proposal.scopedProperties,\n        },\n        proposal.id,\n      ),\n      attestation: proposal.attestation,\n      encryptedId: proposal.encryptedId,\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      const warning =\n        \"requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces\";\n      // if logger level is one of the following, the logger.warn will not be shown, so we need to use console.warn\n      if ([\"fatal\", \"error\", \"silent\"].includes(this.client.logger.level)) {\n        console.warn(warning);\n      } else {\n        this.client.logger.warn(warning);\n      }\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const requestedNamespaces = Object.keys(requiredNamespaces || {}).concat(\n        Object.keys(optionalNamespaces || {}),\n      );\n\n      const scopedNamespaces = Object.keys(scopedProperties);\n      const valid = scopedNamespaces.every((ns) => requestedNamespaces.includes(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, required/optional namespaces: ${JSON.stringify(requestedNamespaces)}`,\n        );\n      }\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties, scopedProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const approvedNamespaces = new Set(Object.keys(namespaces));\n      const scopedNamespaces = Object.keys(scopedProperties);\n\n      // the approved scoped namespaces must be a subset of the approved namespaces\n      const valid = scopedNamespaces.every((ns) => approvedNamespaces.has(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, approved namespaces: ${Array.from(approvedNamespaces).join(\", \")}`,\n        );\n      }\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: SessionTypes.ScopedProperties, type: string) => {\n    Object.values(properties).forEach((property, index) => {\n      if (property === null || property === undefined) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must contain an existing value for each key. Received: ${property} for key ${\n            Object.keys(properties)[index]\n          }`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    // this check will filter all Sign protocol methods since they don't have a method property\n    if (!params.request?.method) {\n      return {};\n    }\n\n    const tvf: RelayerTypes.ITVF = {\n      correlationId: id,\n      rpcMethods: [params.request.method],\n      chainId: params.chainId,\n    };\n    try {\n      const txHashes = this.extractTxHashesFromResult(params.request, result);\n      tvf.txHashes = txHashes;\n      tvf.contractAddresses = this.isValidContractData(params.request.params)\n        ? [params.request.params?.[0]?.to]\n        : [];\n    } catch (e) {\n      this.client.logger.warn(\"Error getting TVF params\", e);\n    }\n    return tvf;\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (\n    request: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"][\"request\"],\n    result: any,\n  ): string[] => {\n    try {\n      if (!result) return [];\n\n      const method = request.method;\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n\n      if (method === \"sui_signTransaction\") {\n        return [getSuiDigest(result.transactionBytes)];\n      }\n\n      if (method === \"near_signTransaction\") {\n        return [getNearTransactionIdFromSignedTransaction(result)];\n      }\n\n      if (method === \"near_signTransactions\") {\n        return result.map((tx: any) => getNearTransactionIdFromSignedTransaction(tx));\n      }\n\n      if (method === \"xrpl_signTransactionFor\" || method === \"xrpl_signTransaction\") {\n        return [result.tx_json?.hash];\n      }\n\n      if (method === \"polkadot_signTransaction\") {\n        return [\n          buildSignedExtrinsicHash({\n            transaction: request.params.transactionPayload,\n            signature: result.signature,\n          }),\n        ];\n      }\n\n      if (method === \"algo_signTxn\") {\n        return isValidArray(result)\n          ? result.map((tx: any) => getAlgorandTransactionId(tx))\n          : [getAlgorandTransactionId(result)];\n      }\n\n      if (method === \"cosmos_signDirect\") {\n        return [getSignDirectHash(result)];\n      }\n\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes: string[] = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        if (method === \"solana_signAllTransactions\") {\n          return hashes.map((hash) => extractSolanaTransactionId(hash));\n        }\n\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(\"Error extracting tx hashes from result\", e);\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport { populateAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = populateAppMetadata(opts?.metadata);\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      setTimeout(() => {\n        this.engine.processRelayMessageCache();\n      }, toMiliseconds(ONE_SECOND));\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","mergeRequiredAndOptionalNamespaces","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","scopedProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","payloadId","sessionConnectTarget","engineEvent","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","proposalExpireHandler","id","session","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","TRANSPORT_TYPES","getSdkError","reason","acknowledged","clientRpcId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","authenticateId","sessionConnectEventTarget","authenticateEventTarget","onSessionConnect","onAuthenticate","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","pendingSession","s","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","warning","requestedNamespaces","ns","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","approvedNamespaces","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","index","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","txHashes","data","hexPart","methodConfig","TVF_METHODS","getSuiDigest","getNearTransactionIdFromSignedTransaction","tx","buildSignedExtrinsicHash","isValidArray","getAlgorandTransactionId","getSignDirectHash","hashes","extractSolanaTransactionId","topics","pendingMessages","messages","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","populateAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}